1. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the   name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
   The STATION table is described as follows:
   
   
SOLUTION 1   
SELECT CITY, L_C FROM(
select * from (
SELECT CITY  , LENGTH(CITY)  AS L_C , ROW_NUMBER() OVER (ORDER BY CITY) as r_n
FROM STATION 
WHERE LENGTH(CITY)= (SELECT MIN(LENGTH(CITY)) FROM STATION))a where r_n=1 
UNION 
select * from (
SELECT CITY  , LENGTH(CITY)  AS L_C , ROW_NUMBER() OVER (ORDER BY CITY) as r_n
FROM STATION 
WHERE LENGTH(CITY)= (SELECT MAX(LENGTH(CITY)) FROM STATION))a where r_n=1)  ;   


SOLUTION 2
SELECT * FROM (
SELECT CITY  , LENGTH(CITY)
FROM STATION 
WHERE LENGTH(CITY)= (SELECT MIN(LENGTH(CITY)) FROM STATION) ORDER BY CITY)
WHERE ROWNUM<=1
UNION
SELECT * FROM (
SELECT CITY  , LENGTH(CITY)
FROM STATION 
WHERE LENGTH(CITY)= (SELECT MAX(LENGTH(CITY)) FROM STATION) ORDER BY CITY)
WHERE ROWNUM<=1;

====================================================================================================================

2. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.


solution Mysql
SELECT DISTINCT CITY FROM STATION  WHERE SUBSTR(CITY,1,1) in ('a', 'e' , 'i' , 'o' ,'u');
solution Oracle
SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '^[aeiou]','i');

===============================================================================================================================

3. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

*solution in Mysql
SELECT DISTINCT CITY FROM STATION  WHERE right(CITY,1)in ('a', 'e' , 'i' , 'o' ,'u')
*Solution in Oracle
SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '[aeiou]$','i');



4.Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot  contain duplicates. 


*Solution in Mysql
SELECT DISTINCT CITY FROM STATION  WHERE right(CITY,1)in ('a', 'e' , 'i' , 'o' ,'u') and SUBSTR(CITY,1,1) in ('a', 'e' , 'i' , 'o' ,'u');
*Solution in oracle
 SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '^[aeiou]','i') and REGEXP_LIKE  (CITY, '[aeiou]$','i');


5. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

* SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '^[^aeiou]','i');
* SELECT DISTINCT CITY FROM STATION  WHERE SUBSTR(CITY,1,1) not in ('a', 'e' , 'i' , 'o' ,'u');

6. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

*  SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '[^aeiou]$','i')


7. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

*  SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '^[^aeiou]','i') and REGEXP_LIKE  (CITY, '[^aeiou]$','i');





8. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION  WHERE REGEXP_LIKE  (CITY, '^[^aeiou]','i') or REGEXP_LIKE  (CITY, '[^aeiou]$','i');


9. Query the Name of any student in STUDENTS who scored higher than  Marks 75. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

* select name from STUDENTS where marks>75 order by substr(NAME, -3),id;



10.Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

11. Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.

SELECT Doctor, Professor, Singer, Actor FROM (
SELECT ROW_NUMBER() OVER (PARTITION BY occupation ORDER BY name) as rn, name, occupation FROM       occupations) 
PIVOT 
(MAX(name) FOR occupation IN ('Doctor' as Doctor,'Professor' as Professor, 'Singer' as Singer, 'Actor' as Actor)) 
ORDER BY rn;

12. Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.actual miscalculated :   average monthly salaries), and round it up to the next integer.



13. We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.


solution 1
select max_salary, count(*) from (
select * from(
select max(salary*months) as MAX_SALARY, employee_id from Employee group by employee_id)
where MAX_SALARY= (select max(salary*months)  from Employee))
where MAX_SALARY= (select max(salary*months)  from Employee)
group by MAX_SALARY;


solution 2

select max_salary, count(c_emp) from(
select max(salary*months) as MAX_SALARY, count(employee_id) c_emp
from Employee group by employee_id)
where max_salary =( select max(salary*months) from Employee )


solution 3

select max_salary, count(c_emp) from(
select max(salary*months) as MAX_SALARY, count(employee_id) c_emp
from Employee 
group by employee_id 
having max(salary*months) = (select max(salary*months) from Employee))
group by max_salary;


14. Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.

a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
c happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points and and round it to a scale of decimal places.

solution 1:
select ROUND(ABS(MAX(LAT_N) - MIN(LAT_N)) + ABS(MAX(LONG_W) - MIN(LONG_W)), 4) FROM STATION;


15.
Consider P1(a, c) and P2(b,d) to be two points on a 2D plane where a, c are the respective minimum and maximum values of Northern Latitude (LAT_N) and b, d are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points and and format your answer to display decimal digits.


SOLUTION: Euclidean Distance
d = √[(x2 – x1)2 + (y2 – y1)2]
select  round(sqrt((power((max(lat_n)-min(lat_n)),2) + power((max(long_w)-min(long_w)),2))),4) from station ;


16.
A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.


select ROUND(median(LAT_N),4)   from STATION ;













